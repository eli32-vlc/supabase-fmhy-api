// single-page-docs edge function
// Copyright (c) 2025 taskylizard. Apache License 2.0.
console.info('single-page-docs function starting');
const FILES = [
  'privacy.md',
  'ai.md',
  'mobile.md',
  'audio.md',
  'beginners-guide.md',
  'developer-tools.md',
  'downloading.md',
  'educational.md',
  'file-tools.md',
  'gaming-tools.md',
  'gaming.md',
  'image-tools.md',
  'internet-tools.md',
  'linux-macos.md',
  'misc.md',
  'non-english.md',
  'reading.md',
  'social-media-tools.md',
  'storage.md',
  'system-tools.md',
  'text-tools.md',
  'torrenting.md',
  'unsafe.md',
  'video-tools.md',
  'video.md'
];
const BASE_URL = 'https://raw.githubusercontent.com/fmhy/edit/main/docs/';
// Simple in-memory cache. Note: In serverless/edge environments this may be ephemeral.
// TTL is in seconds.
const cache = {};
const DEFAULT_TTL = 60 * 60 * 2; // 2 hours
async function fetchAllFiles() {
  // fetch files in parallel
  const promises = FILES.map(async (name)=>{
    const url = BASE_URL + name;
    const res = await fetch(url);
    if (!res.ok) {
      // throw to let caller handle fallback or error
      throw new Error(`Failed to fetch ${url}: ${res.status} ${res.statusText}`);
    }
    return res.text();
  });
  const contents = await Promise.all(promises);
  return '<!-- This is autogenerated content, do not edit manually. -->\n' + contents.join('\n\n');
}
Deno.serve(async (req)=>{
  try {
    const now = Date.now() / 1000; // seconds
    // If cached and still valid, return it
    if (cache.body && cache.expiresAt && cache.expiresAt > now) {
      return new Response(cache.body, {
        status: 200,
        headers: {
          'content-type': 'text/markdown;charset=utf-8',
          'cache-control': `public, max-age=${Math.floor(cache.expiresAt - now)}`,
          'etag': cache.etag ?? ''
        }
      });
    }
    // Otherwise fetch and populate cache
    const body = await fetchAllFiles();
    cache.body = body;
    cache.expiresAt = now + DEFAULT_TTL;
    cache.etag = `W/"${Math.floor(Math.random() * 1e9)}"`;
    return new Response(body, {
      status: 200,
      headers: {
        'content-type': 'text/markdown;charset=utf-8',
        'cache-control': `public, max-age=${DEFAULT_TTL}`,
        'etag': cache.etag
      }
    });
  } catch (err) {
    console.error('Error building single page:', err);
    return new Response(JSON.stringify({
      error: 'Failed to generate page'
    }), {
      status: 502,
      headers: {
        'content-type': 'application/json'
      }
    });
  }
});
